using System;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Owin;
using Newtonsoft.Json;
using Domain.Common;

namespace Infrastructure.Middleware
{
    public class GlobalExceptionMiddleware : OwinMiddleware
    {
        public GlobalExceptionMiddleware(OwinMiddleware next) : base(next) { }

        public override async Task Invoke(IOwinContext context)
        {
            try
            {
                await Next.Invoke(context);
            }
            catch (Exception ex)
            {
                context.Response.ContentType = "application/json";

                int statusCode = (int)HttpStatusCode.InternalServerError;
                string message = "Terjadi kesalahan pada server.";
                string innerMessage = null;

                if (ex is Domain.Common.Exceptions.AppException appEx)
                {
                    statusCode = appEx.StatusCode;
                    message = appEx.Message;
                    innerMessage = appEx.InnerException?.Message;
                }

                var errorResponse = new BaseResponse<object>
                {
                    IsSuccess = false,
                    Message = message,
                    InnerMessage = innerMessage,
                    StatusCode = statusCode,
                    Data = null
                };

                context.Response.StatusCode = statusCode;
                var errorJson = JsonConvert.SerializeObject(errorResponse);
                await context.Response.WriteAsync(errorJson);
            }
        }
    }
}
