using System;
using System.Net.Sockets;
using System.Net.Security;
using System.Text;
using System.Threading;
using Telnet;

public class TerminalEmulator
{
    private string _host;
    private int _port;
    private SslStream _sslStream;
    private TelnetClient _telnetClient;

    public TerminalEmulator(string host, int port)
    {
        _host = host;
        _port = port;
        _telnetClient = new TelnetClient(_host, _port);
    }

    public void Connect()
    {
        try
        {
            // Create SSL connection
            var tcpClient = new TcpClient(_host, _port);
            _sslStream = new SslStream(tcpClient.GetStream(), false, new RemoteCertificateValidationCallback((sender, certificate, chain, sslPolicyErrors) => true));
            _sslStream.AuthenticateAsClient(_host);

            Console.WriteLine("Connected to IBM i via SSL");

            // Start reading data
            StartReading();
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error during connection: " + ex.Message);
        }
    }

    public void StartReading()
    {
        var buffer = new byte[2048];
        while (true)
        {
            try
            {
                int bytesRead = _sslStream.Read(buffer, 0, buffer.Length);
                if (bytesRead > 0)
                {
                    string hexData = BitConverter.ToString(buffer, 0, bytesRead);
                    Console.WriteLine("Received data: " + hexData);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error while reading: " + ex.Message);
                break;
            }
        }
    }

    public void SendData(byte[] data)
    {
        try
        {
            _sslStream.Write(data, 0, data.Length);
            _sslStream.Flush();
            Console.WriteLine("Data sent: " + BitConverter.ToString(data));
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error while sending data: " + ex.Message);
        }
    }
}
