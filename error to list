public async Task<BaseResponse<UserDto>?> UpdateUserAsync(UserViewModel user, CancellationToken cancellationToken)
{
    return await _httpClient.PutAsync<UserDto>($"users/{user.UserId}", user, cancellationToken);
}

[HttpPut("update")]
public async Task<IActionResult> UpdateUser([FromBody] UserViewModel model, CancellationToken cancellationToken)
{
    if (!ModelState.IsValid)
        return BadRequest(ModelState);

    var response = await _user.UpdateUserAsync(model, cancellationToken);
    return Json(response);
}

window.submitUserForm = function (event) {
    event.preventDefault();
    const form = event.target;
    const formData = new FormData(form);
    const userData = {};
    formData.forEach((value, key) => {
        if (key === 'IsActive') {
            const isActive = form.querySelector('input[name="IsActive"]');
            userData[key] = isActive ? isActive.checked : false;
        } else {
            userData[key] = value;
        }
    });

    const isEdit = form.querySelector('input[name="IsEdit"]').value === 'true';
    const url = isEdit ? '/users/update' : '/users/add';

    fetch(url, {
        method: isEdit ? 'PUT' : 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(userData)
    })
        .then(response => response.json())
        .then(data => {
            console.log(data);
            if (data.isSuccess) {
                form.reset();
                if (!isEdit) {
                    closeForm(isEdit, '');
                } else if (currentOpenId) {
                    closeEditUserForm(currentOpenId);
                }
                location.reload();
            } else {
                alert('Failed to save user');
            }
        })
        .catch(error => console.error('Error:', error));
};

[HttpPut("{userId}")]
public async Task<IActionResult> Update(Guid userId, [FromBody] UserViewModel model)
{
    var result = await _mediator.Send(new UpdateUserCommand(userId, model));
    return result.IsSuccess ? Ok(result) : NotFound(result);
}
