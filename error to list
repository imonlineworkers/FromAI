// user.js

let currentOpenId = null;

document.addEventListener('DOMContentLoaded', function () {
    // Handle form submit for Add and Edit User
    window.submitUserForm = function (event) {
        event.preventDefault();
        const form = event.target;
        const formData = new FormData(form);
        const userData = {};
        formData.forEach((value, key) => userData[key] = value);

        const isEdit = form.querySelector('input[name="IsEdit"]').value === 'true';
        const url = isEdit ? '/users/update' : '/users/add';

        fetch(url, {
            method: isEdit ? 'PUT' : 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(userData)
        })
            .then(response => response.json())
            .then(data => {
                console.log(data);
                if (data.isSuccess) {
                    form.reset();
                    if (!isEdit) {
                        closeForm(isEdit,'');
                    } else if (currentOpenId) {
                        closeEditUserForm(currentOpenId);
                    }
                    location.reload();
                } else {
                    alert('Failed to save user');
                }
            })
            .catch(error => console.error('Error:', error));
    };

    // Edit User
    window.toggleUserForm = async function (userId) {
        const collapseRow = document.getElementById(`row_${userId}`);
        const formContent = document.getElementById(`formContent_${userId}`);
        const contentWrapper = document.getElementById(`content_${userId}`);

        if (currentOpenId === userId) {
            closeEditUserForm(userId);
            return;
        }

        if (currentOpenId) {
            closeEditUserForm(currentOpenId);
        }

        try {
            const response = await fetch(`/users/edit/${userId}`);
            if (!response.ok) {
                console.error('Failed to load form');
                return;
            }

            formContent.innerHTML = await response.text();
            const isEditInput = document.createElement('input');
            isEditInput.type = 'hidden';
            isEditInput.name = 'IsEdit';
            isEditInput.value = 'true';
            formContent.querySelector('form').appendChild(isEditInput);

            bootstrap.Collapse.getOrCreateInstance(collapseRow).show();
            setTimeout(() => {
                contentWrapper.classList.add('show');
            }, 100);
            currentOpenId = userId;
        } catch (error) {
            console.error('Error loading form', error);
        }
    };

    // Delete User
    window.deleteUser = function (userId) {
        console.log(userId);
        if (!confirm('Are you sure you want to delete this user?')) return;

        fetch(`/users/delete`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(userId)
        })
            .then(response => response.json())
            .then(data => {
                if (data.isSuccess) {
                    location.reload();
                } else {
                    alert('Failed to delete user');
                }
            })
            .catch(error => console.error('Error deleting user:', error));
    };

    window.closeForm = function (isEdit, userId) {
        console.log(userId);
        if (isEdit === false) {
            bootstrap.Collapse.getOrCreateInstance(document.getElementById('addUserForm')).hide();
        } else {
            closeEditUserForm(userId);
        }
    };

    window.closeEditUserForm = function (userId) {
        const collapseRow = document.getElementById(`row_${userId}`);
        const contentWrapper = document.getElementById(`content_${userId}`);
        contentWrapper.classList.remove('show');
        setTimeout(() => {
            bootstrap.Collapse.getOrCreateInstance(collapseRow).hide();
        }, 300);
        currentOpenId = null;

    };
});

@using AS400WebInterface.Application.ViewModels
@model UserViewModel

<form onsubmit="submitUserForm(event)">
    <input type="hidden" asp-for="UserId" />
    <input type="hidden" name="IsEdit" value="@(Model.UserId != Guid.Empty ? "true" : "false")" />
    <div class="mb-3 col-md-4">
        <div class="form-floating">
            <input type="text" asp-for="UserName" class="form-control" placeholder=" " required>
            <label asp-for="UserName" class="form-label">Username</label>
            <div class="invalid-feedback">
                Please enter a username.
            </div>
        </div>
    </div>

    <div class="mb-3 col-md-4">
        <div class="form-floating">
            <input type="text" asp-for="FullName" class="form-control" placeholder=" " required>
            <label asp-for="FullName" class="form-label">Full Name</label>
            <div class="invalid-feedback">
                Please enter a full name.
            </div>
        </div>
    </div>

    <div class="mb-3 col-md-4">
        <select asp-for="Department" class="form-select">
            <option value="">Select Department</option>
            <option value="POS">POS</option>
            <option value="Claim">Claim</option>
            <option value="Finance">Finance</option>
            <option value="CompBen">Compensation Benefit</option>
        </select>
    </div>

    <div class="mb-3 col-md-4">
        <select asp-for="Role" class="form-select">
            <option value="">Select Role</option>
            <option value="Admin">Admin</option>
            <option value="User">User</option>
            <option value="Manager">Manager</option>
            <option value="Guest">Guest</option>
        </select>
    </div>

    @if (Model.UserId != Guid.Empty)
    {
        <div class="mb-3 col-md-4 form-check">
            <input id="isActiveCheckbox" type="checkbox" asp-for="IsActive" class="form-check-input">
            <label for="isActiveCheckbox" class="form-check-label">Active</label>
        </div>
    }

    <div class="d-flex justify-content-end mb-3">
        <button type="button" class="btn btn-secondary me-2" onclick="closeForm(@(Model.UserId != Guid.Empty ? "true" : "false"), '@Model.UserId')">
            Cancel
        </button>
        <button type="submit" class="btn btn-primary">Save User</button>
    </div>
</form>

