@using AS400WebInterface.Application.ViewModels
@model UserViewModel

<form id="userForm" method="post">
    <input type="hidden" asp-for="UserId" />
    <div class="mb-3 col-md-4">
        <div class="form-floating">
            <input type="text" asp-for="UserName" class="form-control" placeholder=" " required>
            <label asp-for="UserName">Username</label>
        </div>
    </div>

    <div class="mb-3 col-md-4">
        <div class="form-floating">
            <input type="text" asp-for="FullName" class="form-control" placeholder=" " required>
            <label asp-for="FullName">Full Name</label>
        </div>
    </div>

    <div class="mb-3 col-md-4">
        <select asp-for="Department" class="form-select">
            <option value="">Select Department</option>
            <option value="POS">POS</option>
            <option value="Claim">Claim</option>
            <option value="Finance">Finance</option>
            <option value="CompBen">Compensation Benefit</option>
        </select>
    </div>

    <div class="mb-3 col-md-4">
        <select asp-for="Role" class="form-select">
            <option value="">Select Role</option>
            <option value="Admin">Admin</option>
            <option value="User">User</option>
            <option value="Manager">Manager</option>
            <option value="Guest">Guest</option>
        </select>
    </div>

    <div class="d-flex justify-content-end mb-3">
        <button type="button" class="btn btn-secondary me-2" data-bs-toggle="collapse" data-bs-target="#addUserForm">Cancel</button>
        <button type="submit" class="btn btn-primary">Save User</button>
    </div>
</form>

@using AS400WebInterface.Application.ViewModels
@model List<UserViewModel>

<div class="container">
    <div class="card shadow-sm p-2">
        <h4 class="text-center mb-4 text-uppercase border-bottom py-3">User List</h4>

        <!-- Add User -->
        <button class="btn btn-primary mb-3 col-2 d-flex align-items-center justify-content-center" type="button"
                data-bs-toggle="collapse" data-bs-target="#addUserForm" aria-expanded="false">
            <i class="bx bxs-add-to-queue me-2"></i> Add User
        </button>
        <div id="addUserForm" class="collapse">
            <partial name="_UserForm" model="new UserViewModel()" />
        </div>

        <!-- User Table -->
        <div class="table-responsive">
            <table class="table table-bordered table-striped fs-6">
                <thead class="table-dark">
                    <tr>
                        <th>Username</th>
                        <th>Full Name</th>
                        <th>Department</th>
                        <th>Role</th>
                        <th>Is Active</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var user in Model)
                    {
                        <tr>
                            <td>@user.UserName</td>
                            <td>@user.FullName</td>
                            <td>@user.Department</td>
                            <td>@user.Role</td>
                            <td>@(user.IsActive ? "Active" : "Inactive")</td>
                            <td class="d-flex align-items-center justify-content-center">
                                <button type="button" class="btn btn-sm btn-warning me-2" onclick="toggleUserForm('@user.UserId')">Edit</button>
                                <button type="button" class="btn btn-sm btn-danger" onclick="deleteUser('@user.UserId')">Delete</button>
                            </td>
                        </tr>
                        <tr id="row_@user.UserId" class="collapse">
                            <td colspan="6">
                                <div id="content_@user.UserId" class="p-3 border rounded-3 bg-light shadow-sm fade">
                                    <h5 class="mb-4 text-uppercase border-bottom py-3">Edit User</h5>
                                    <div id="formContent_@user.UserId"></div>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

<script src="~/js/User.js"></script>

// user.js

let currentOpenId = null;

document.addEventListener('DOMContentLoaded', function () {
    const addUserForm = document.getElementById('addUserForm');

    // Add User (Event Delegation)
    if (addUserForm) {
        addUserForm.addEventListener('submit', function (e) {
            e.preventDefault();

            const formData = new FormData(addUserForm.querySelector('form'));
            const userData = {};
            formData.forEach((value, key) => userData[key] = value);

            fetch('/User/Create', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(userData)
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    addUserForm.querySelector('form').reset();
                    bootstrap.Collapse.getOrCreateInstance(addUserForm).hide();
                    location.reload(); // Reload to update table with new data from server
                } else {
                    alert('Failed to add user');
                }
            })
            .catch(error => console.error('Error:', error));
        });
    }

    // Edit User
    window.toggleUserForm = async function (userId) {
        const collapseRow = document.getElementById(`row_${userId}`);
        const formContent = document.getElementById(`formContent_${userId}`);
        const contentWrapper = document.getElementById(`content_${userId}`);

        if (currentOpenId === userId) {
            contentWrapper.classList.remove('show');
            setTimeout(() => {
                bootstrap.Collapse.getOrCreateInstance(collapseRow).hide();
            }, 300);
            bootstrap.Collapse.getOrCreateInstance(collapseRow).toggle();
            currentOpenId = null;
            return;
        }

        if (currentOpenId) {
            const prevContent = document.getElementById(`content_${currentOpenId}`);
            const prevRow = document.getElementById(`row_${currentOpenId}`);
            prevContent.classList.remove('show');

            setTimeout(() => {
                bootstrap.Collapse.getOrCreateInstance(prevRow).hide();
            }, 300);
        }

        try {
            const response = await fetch(`/User/EditUser/${userId}`);
            if (!response.ok) {
                console.error('Failed to load form');
                return;
            }

            formContent.innerHTML = await response.text();
            contentWrapper.classList.remove('show');
            bootstrap.Collapse.getOrCreateInstance(collapseRow).show();

            setTimeout(() => {
                contentWrapper.classList.add('show');
            }, 100);
            currentOpenId = userId;
        } catch (error) {
            console.error('Error loading form', error);
        }
    }

    // Delete User
    window.deleteUser = function (userId) {
        if (!confirm('Are you sure you want to delete this user?')) return;

        fetch(`/User/DeleteUser`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ userId })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                location.reload(); // Reload to reflect deletion
            } else {
                alert('Failed to delete user');
            }
        })
        .catch(error => console.error('Error deleting user:', error));
    }
});
