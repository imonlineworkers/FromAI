using System;
using System.Data;
using System.Threading.Tasks;
using Java.Sql;

public class DynamicRepository
{
    private readonly AS400ConnectionFactory _connectionFactory;

    public DynamicRepository(AS400ConnectionFactory connectionFactory)
    {
        _connectionFactory = connectionFactory;
    }

    public async Task<List<Dictionary<string, object>>> ExecuteQueryAsync(string query, List<object> parameters = null)
{
    var result = new List<Dictionary<string, object>>();
    Connection conn = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;

    await Task.Run(() =>
    {
        try
        {
            conn = _connectionFactory.GetConnection();
            stmt = conn.PrepareStatement(query);

            // Bind parameter
            if (parameters != null)
            {
                for (int i = 0; i < parameters.Count; i++)
                {
                    stmt.SetObject(i + 1, parameters[i]);
                }
            }

            rs = stmt.ExecuteQuery();
            var metaData = rs.GetMetaData();
            int columnCount = metaData.GetColumnCount();

            while (rs.Next())
            {
                var row = new Dictionary<string, object>();
                for (int i = 1; i <= columnCount; i++)
                {
                    row[metaData.GetColumnName(i)] = rs.GetObject(i);
                }
                result.Add(row);
            }
        }
        finally
        {
            rs?.Close();
            stmt?.Close();
            conn?.Close();
        }
    });

    return result;
}

}
